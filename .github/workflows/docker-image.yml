name: CI/CD Pipeline
on:
  #Trigger the workflow on push from the main branch 
  push:
    branches:
      - main
jobs:
  tests:
    name: Unit tests
    #Run on ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
    #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
    - uses: actions/checkout@v1
    #Set up JDK 11
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    #Set up Maven cache
    - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
  sonar:
    needs: tests
    name: Sonar cube analysis
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
  #Build's job
  build:
    #Depends on sonar's job
    needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest  
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/*-SNAPSHOT.jar


  

  deploy:
    #Depends on sonar's job
    needs: build
    name: Deploy 
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: artifact 
      - name: Build And Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: chaosmaker/github-flow-test
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
